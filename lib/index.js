// Generated by CoffeeScript 1.10.0
(function() {
  var $alchemy, $alchemyResult, $cost, $difficultydiff, $error, $form, $kn, $main, $negative, $negativekn, $secondary, $values, addDisplayValueProvider, addErrorProvider, addValueProvider, alchemyModifiers, calculateCost, calculateDifficulty, calculateNegativeDifficulty, clearDisplayValues, clearErrorMessage, costMultipliers, difficultyModifiers, displayValueProvider, errorProvider, exportData, getAlchemyValue, getFormData, getHtmlDifficultyModifier, getHtmlSpecialModifier, getNumber, init, negativeDifficultyModifiers, renderAlchemyModifiers, renderAlchemyResult, renderAllSpecialModifiers, renderCost, renderDifficulty, renderListData, renderModifiers, renderNegativeDifficulty, renderNegativeModifiers, renderSimpleValue, renderSpecialModifier, renderSuccess, specialDifficultyModifiers, t, testAlchemy;

  t = parser.t, addErrorProvider = parser.addErrorProvider, addValueProvider = parser.addValueProvider, difficultyModifiers = parser.difficultyModifiers, specialDifficultyModifiers = parser.specialDifficultyModifiers, negativeDifficultyModifiers = parser.negativeDifficultyModifiers, costMultipliers = parser.costMultipliers, calculateDifficulty = parser.calculateDifficulty, calculateCost = parser.calculateCost, addDisplayValueProvider = parser.addDisplayValueProvider, calculateNegativeDifficulty = parser.calculateNegativeDifficulty, alchemyModifiers = parser.alchemyModifiers, testAlchemy = parser.testAlchemy;

  $main = $('#main_container_field');

  $secondary = $('#secondary_container_field');

  $kn = $('#kn_container_field');

  $negativekn = $('#negative_kn_container_field');

  $cost = $('#cost_container_field');

  $error = $('#error_container_field');

  $values = $('#values_container_field');

  $form = $('#form_data');

  $negative = $('#negative_value_container_filed');

  $difficultydiff = $('#difference_container_field');

  $alchemy = $('#alchemy_container_filed');

  $alchemyResult = $('#alchemy_result_container_field');

  errorProvider = function(errorMessage) {
    return $error.html("Hiba: <span>" + errorMessage + "</span>");
  };

  getNumber = function(label) {
    return prompt("Írj be egy számot (" + label + ")!", 0);
  };

  displayValueProvider = function(key, label, value) {
    return $values.append("<div>" + label + " : <strong>" + value + "</strong></div>");
  };

  addValueProvider('getNumber', getNumber);

  addErrorProvider(errorProvider);

  addDisplayValueProvider(displayValueProvider);

  parser.init();

  clearDisplayValues = function() {
    return $values.html('');
  };

  clearErrorMessage = function() {
    return $error.html('');
  };

  getHtmlDifficultyModifier = function(type, names) {
    var html;
    html = "<div class='form-group'><label class='col-sm-6 control-label' for='id_" + type + "'>" + (t(type)) + ":</label> ";
    html += "<div class='col-sm-6'><select class='form-control' id='id_" + type + "' name='" + type + "'>";
    html += _(names).keys().reduce((function(sum, key) {
      return sum + "\n<option value='" + key + "'>" + (t(key)) + "</option>";
    }), '');
    return html += "</select></div></div>";
  };

  renderModifiers = function() {
    return renderListData($main, difficultyModifiers);
  };

  renderNegativeModifiers = function() {
    return renderListData($negative, negativeDifficultyModifiers);
  };

  renderAlchemyModifiers = function() {
    return renderListData($alchemy, alchemyModifiers);
  };

  renderListData = function($target, list) {
    var content;
    content = _(list).reduce((function(res, modifiers, name) {
      return res + "\n" + (getHtmlDifficultyModifier(name, modifiers));
    }), '');
    return $target.html(content);
  };

  getHtmlSpecialModifier = function(name, effect, selectedValue) {
    return "<label class='radio-inline' for='id_" + name + "_" + effect + "'> <input id='id_" + name + "_" + effect + "' type='radio' name='" + name + "' value='" + effect + "' " + (effect === selectedValue ? "checked='checked'" : "") + " /> " + (t(effect)) + " </label>";
  };

  renderSpecialModifier = function(name) {
    var effects, poisonType, selectedValue;
    poisonType = getFormData("tipus_" + name);
    effects = _(costMultipliers[poisonType].hatas).keys();
    selectedValue = getFormData(name);
    if (effects.indexOf(selectedValue) === -1) {
      selectedValue = effects.first();
    }
    return effects.reduce((function(res, effectName) {
      return res + "\n" + (getHtmlSpecialModifier(name, effectName, selectedValue));
    }), '');
  };

  renderAllSpecialModifiers = function() {
    var content;
    content = _(specialDifficultyModifiers).keys().reduce((function(res, type) {
      return res + "<div class='form-group' id='" + type + "'><label class='col-sm-2 control-label'>" + (t(type)) + "</label> <div class='col-sm-10'>" + (renderSpecialModifier(type)) + "</div></div>";
    }), '');
    return $secondary.html(content);
  };

  renderSimpleValue = function(labelKey, value, type) {
    if (type == null) {
      type = 'info';
    }
    return "<span>" + (t(labelKey)) + ": <span class='label label-" + type + "'>" + value + "</span></span>";
  };

  renderCost = function() {
    var cost;
    cost = calculateCost(getFormData());
    $cost.html(renderSimpleValue('ar', cost));
    return cost;
  };

  renderDifficulty = function(item) {
    var difficulty, value;
    difficulty = calculateDifficulty(getFormData(), $(item).prop('name'));
    value = difficulty ? difficulty : 'Hiba!';
    $kn.html(renderSimpleValue('kn', value));
    return value;
  };

  renderNegativeDifficulty = function() {
    var cost;
    cost = calculateNegativeDifficulty(getFormData());
    $negativekn.html(renderSimpleValue('negative', cost));
    return cost;
  };

  renderAlchemyResult = function(alchemyValue) {
    var diff, type;
    alchemyValue = getAlchemyValue();
    if (alchemyValue === true) {
      diff = 'megfelelő';
      type = 'success';
    } else {
      diff = 'elégtelen';
      type = 'danger';
    }
    $alchemyResult.html(renderSimpleValue('felszerelés', diff, type));
    return alchemyValue;
  };

  renderSuccess = function(difficulty, negativeDifficulty, alchemyValue) {
    var diff, type;
    if ((negativeDifficulty - difficulty > 0) && (alchemyValue === true)) {
      diff = 'igen';
      type = 'success';
    } else {
      diff = 'nem';
      type = 'danger';
    }
    $difficultydiff.html(renderSimpleValue('kikeverhető', diff, type));
    return diff;
  };

  getAlchemyValue = function() {
    var alchemyLevel, poisonType, supplyType;
    alchemyLevel = $('#id_alkimia').val();
    supplyType = $('#id_felszereles').val();
    poisonType = $('#id_fajta').val();
    return testAlchemy(supplyType, poisonType, alchemyLevel);
  };

  getFormData = function(attr) {
    var data, ref;
    data = $form.serializeArray();
    if (!attr) {
      return data;
    }
    return (ref = _(data).find({
      name: attr
    })) != null ? ref.value : void 0;
  };

  exportData = function() {};

  init = function() {
    var alchemy, difficulty, negativeDifficulty;
    renderModifiers();
    renderNegativeModifiers();
    renderAlchemyModifiers();
    renderAllSpecialModifiers();
    difficulty = renderDifficulty();
    negativeDifficulty = renderNegativeDifficulty();
    alchemy = renderAlchemyResult();
    renderSuccess(difficulty, negativeDifficulty, alchemy);
    renderCost();
    clearErrorMessage();
    clearDisplayValues();
    $('form').on('change', '#id_tipus_fo', function(event) {
      return $('#id_tipus_eros, #id_tipus_gyenge').val($(event.target).val());
    });
    $('form').on('change', 'select[name^="tipus"]', function() {
      return renderAllSpecialModifiers();
    });
    return $('form').on('change', 'select, input', function(event) {
      clearDisplayValues();
      clearErrorMessage();
      renderCost();
      difficulty = renderDifficulty(event.target);
      negativeDifficulty = renderNegativeDifficulty();
      alchemy = renderAlchemyResult();
      return renderSuccess(difficulty, negativeDifficulty, alchemy);
    });
  };

  init();

}).call(this);
