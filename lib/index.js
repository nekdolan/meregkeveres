// Generated by CoffeeScript 1.9.3
(function() {
  var $alchemy, $alchemyResult, $cost, $difficultydiff, $error, $export, $form, $kn, $main, $negative, $negativekn, $secondary, $values, addErrorProvider, addValueProvider, alchemyModifiers, calculateCost, calculateDifficulty, calculateNegativeDifficulty, clearDisplayValues, clearErrorMessage, costMultipliers, difficultyModifiers, errorProvider, exportData, getAlchemyValue, getFormData, getHtmlDifficultyModifier, getHtmlSpecialModifier, getNumber, hiddenModifiers, init, negativeDifficultyModifiers, renderAlchemyModifiers, renderAlchemyResult, renderAllSpecialModifiers, renderCost, renderDifficulty, renderEffectsDesc, renderHiddenModifier, renderHiddenModifiers, renderListData, renderModifiers, renderNegativeDifficulty, renderNegativeModifiers, renderSimpleValue, renderSpecialDifficultyModifierEffects, renderSpecialModifier, renderSuccess, specialDifficultyModifierEffects, specialDifficultyModifiers, t, testAlchemy, update;

  t = parser.t, addErrorProvider = parser.addErrorProvider, addValueProvider = parser.addValueProvider, difficultyModifiers = parser.difficultyModifiers, specialDifficultyModifiers = parser.specialDifficultyModifiers, negativeDifficultyModifiers = parser.negativeDifficultyModifiers, costMultipliers = parser.costMultipliers, calculateDifficulty = parser.calculateDifficulty, calculateCost = parser.calculateCost, calculateNegativeDifficulty = parser.calculateNegativeDifficulty, specialDifficultyModifierEffects = parser.specialDifficultyModifierEffects, alchemyModifiers = parser.alchemyModifiers, testAlchemy = parser.testAlchemy, hiddenModifiers = parser.hiddenModifiers;

  $main = $('#main_container_field');

  $secondary = $('#secondary_container_field');

  $kn = $('#kn_container_field');

  $negativekn = $('#negative_kn_container_field');

  $cost = $('#cost_container_field');

  $error = $('#error_container_field');

  $values = $('#values_container_field');

  $form = $('#form_data');

  $negative = $('#negative_value_container_filed');

  $difficultydiff = $('#difference_container_field');

  $alchemy = $('#alchemy_container_filed');

  $alchemyResult = $('#alchemy_result_container_field');

  $export = $('#export');

  errorProvider = function(errorMessage) {
    return $error.html("Hiba: <span>" + errorMessage + "</span>");
  };

  getNumber = function(label) {
    var values;
    $("#" + label).removeClass('hidden');
    values = $("[id*=" + label + "]").serializeArray();
    return _.reduce(values, (function(res, next) {
      return res * next.value.replace(/\D/g, '');
    }), 1);
  };

  addValueProvider('getNumber', getNumber);

  addErrorProvider(errorProvider);

  parser.init();

  clearDisplayValues = function() {
    return $values.children().addClass('hidden');
  };

  clearErrorMessage = function() {
    return $error.html('');
  };

  getHtmlDifficultyModifier = function(type, names) {
    var html;
    html = "<div class='form-group'><label class='col-sm-6 control-label' for='id_" + type + "'>" + (t(type)) + ":</label> ";
    html += "<div class='col-sm-6'><select class='form-control' id='id_" + type + "' name='" + type + "'>";
    html += _(names).keys().reduce((function(sum, key) {
      return sum + "\n<option value='" + key + "'>" + (t(key)) + "</option>";
    }), '');
    return html += "</select></div></div>";
  };

  renderModifiers = function() {
    return renderListData($main, difficultyModifiers);
  };

  renderNegativeModifiers = function() {
    return renderListData($negative, negativeDifficultyModifiers);
  };

  renderAlchemyModifiers = function() {
    return renderListData($alchemy, alchemyModifiers);
  };

  renderListData = function($target, list) {
    var content;
    content = _(list).reduce((function(res, modifiers, name) {
      return res + "\n" + (getHtmlDifficultyModifier(name, modifiers));
    }), '');
    return $target.html(content);
  };

  getHtmlSpecialModifier = function(name, effect, selectedValue) {
    return "<label class='radio-inline' for='id_" + name + "_" + effect + "'> <input id='id_" + name + "_" + effect + "' type='radio' name='" + name + "' value='" + effect + "' " + (effect === selectedValue ? "checked='checked'" : "") + " /> " + (t(effect)) + " </label>";
  };

  renderSpecialModifier = function(name) {
    var effects, poisonType, selectedValue;
    poisonType = getFormData("tipus_" + name);
    effects = _(costMultipliers[poisonType].hatas).keys();
    selectedValue = getFormData(name);
    if (effects.indexOf(selectedValue) === -1) {
      selectedValue = effects.first();
    }
    return effects.reduce((function(res, effectName) {
      return res + "\n" + (getHtmlSpecialModifier(name, effectName, selectedValue));
    }), '');
  };

  renderAllSpecialModifiers = function() {
    var content;
    content = _(specialDifficultyModifiers).keys().reduce((function(res, type) {
      return res + "<div class='form-group' id='" + type + "'><label class='col-sm-2 control-label'>" + (t(type)) + "</label> <div class='col-sm-10'>" + (renderSpecialModifier(type)) + "</div></div><div id='desc_" + type + "'></div>";
    }), '');
    return $secondary.html(content);
  };

  renderSimpleValue = function(labelKey, value, type) {
    if (type == null) {
      type = 'info';
    }
    return "<span>" + (t(labelKey)) + ": <span class='label label-" + type + "'>" + value + "</span></span>";
  };

  renderCost = function() {
    var cost;
    cost = calculateCost(getFormData());
    $cost.html(renderSimpleValue('ar', cost));
    return cost;
  };

  renderDifficulty = function(item) {
    var difficulty, formData, knValue, negativeDifficulty, success, type;
    formData = getFormData();
    negativeDifficulty = calculateNegativeDifficulty(formData);
    difficulty = calculateDifficulty(formData, $(item).prop('name'), $('#id_meregkeveres').val());
    success = difficulty <= negativeDifficulty;
    if (success === true) {
      knValue = 'elegendő';
      type = 'success';
    } else {
      type = 'danger';
      knValue = 'sok';
    }
    knValue = knValue + " " + difficulty + " ≤ " + negativeDifficulty;
    knValue = difficulty ? knValue : 'Hiba!';
    $kn.html(renderSimpleValue('kn', knValue, type));
    return {
      success: success,
      difficulty: difficulty
    };
  };

  renderNegativeDifficulty = function() {
    var cost;
    cost = calculateNegativeDifficulty(getFormData());
    $negativekn.html(renderSimpleValue('negative', cost));
    return cost;
  };

  renderHiddenModifier = function(inputModifier, inputKey, modifierName) {
    var html, type;
    type = modifierName + "_" + inputKey;
    if (typeof inputModifier !== 'number') {
      return html = getHtmlDifficultyModifier(type, inputModifier);
    } else {
      html = "<div class='form-group'><label class='col-sm-6 control-label' for='id_" + type + "'>" + (t(type)) + ":</label> ";
      html += "<div class='col-sm-6'><input min='" + inputModifier + "' type='number' class='form-control' id='id_" + type + "' name='" + type + "' value='" + inputModifier + "' />";
      return html += "</div></div>";
    }
  };

  renderHiddenModifiers = function() {
    var content;
    content = _.reduce(hiddenModifiers, (function(res, next, key) {
      return res + ("<div class='hidden hidden_input' id='" + key + "'> <legend>" + (t(key)) + "</legend>\n") + (_.reduce(next.inputs, (function(res, next, innerKey) {
        return res + renderHiddenModifier(next, innerKey, key);
      }), '')) + "</div>";
    }), '');
    return $values.html(content);
  };

  renderEffectsDesc = function() {
    return _.each(['eros', 'gyenge'], function(level) {
      return $("#desc_" + level).html(renderSpecialDifficultyModifierEffects($("[name='" + level + "']:checked").val()));
    });
  };

  renderSpecialDifficultyModifierEffects = function(specialModifier) {
    var add, content, effects, labels;
    labels = specialDifficultyModifierEffects.labels;
    effects = specialDifficultyModifierEffects[specialModifier];
    if (effects == null) {
      return '';
    }
    add = window.self !== window.top ? 'background-color: rgba(100, 100, 100,0.1)' : '';
    content = "<div class='table-responsive'><table class='table' style='" + add + "'><tr>";
    content += _.reduce(labels, (function(res, next) {
      return res + ("<th>" + next + "</th>");
    }), '');
    content += '</tr><tr>';
    content += _.reduce(effects, (function(res, next) {
      return res + ("<td>" + (next === 0 ? '-' : next) + "</td>");
    }), '');
    return content += "</tr></table></div>";
  };

  renderAlchemyResult = function(difficulty) {
    var alchemyValue, diff, type;
    alchemyValue = getAlchemyValue(difficulty);
    if (alchemyValue.test === true) {
      diff = 'megfelelő';
      type = 'success';
    } else {
      diff = 'elégtelen';
      type = 'danger';
    }
    diff = diff + " " + alchemyValue.neededAlchemyLevel + " ≤ " + alchemyValue.availableAlchemyLevel;
    $alchemyResult.html(renderSimpleValue('alkímia felszerelés', diff, type));
    return alchemyValue.test;
  };

  renderSuccess = function(difficultySuccess, alchemyValue) {
    var diff, type;
    if ((difficultySuccess === true) && (alchemyValue === true)) {
      diff = 'igen';
      type = 'success';
    } else {
      diff = 'nem';
      type = 'danger';
    }
    $difficultydiff.html(renderSimpleValue('kikeverhető', diff, type));
    return diff === 'igen';
  };

  getAlchemyValue = function(difficulty) {
    var alchemyLevel, supplyType;
    alchemyLevel = $('#id_alkimia').val();
    supplyType = $('#id_felszereles').val();
    return testAlchemy(supplyType, difficulty, alchemyLevel);
  };

  getFormData = function(attr) {
    var data, ref;
    data = $form.serializeArray();
    if (!attr) {
      return data;
    }
    return (ref = _(data).find({
      name: attr
    })) != null ? ref.value : void 0;
  };

  exportData = function(event) {
    var alchemy, cost, data, difficulty, formAllData, formData, name, negativeDifficulty, results, success, values;
    formAllData = getFormData();
    values = _.map($values.find('.hidden_input').not('.hidden').map(function() {
      return this.id;
    }), function(id) {
      return [t(id), hiddenModifiers[id].calculate($("#" + id + " :input").serializeArray())];
    });
    formData = _.reject(formAllData, function(input) {
      var match;
      return match = _.find(hiddenModifiers, function(modifier, modifierKey) {
        return new RegExp(modifierKey + ".*").test(input.name);
      });
    });
    difficulty = calculateDifficulty(formData, null, $('#id_meregkeveres').val());
    negativeDifficulty = calculateNegativeDifficulty(formData);
    alchemy = getAlchemyValue(difficulty);
    success = difficulty <= negativeDifficulty && alchemy.test;
    cost = calculateCost(formData);
    if (success === false) {
      errorProvider('A mérget nem lehet kikeverni, ezért az nem exportálható!');
      return;
    }
    name = prompt('Írj be egy fájlnevet a méregnek!', "mereg_" + (new Date() * 1));
    if (!name) {
      return;
    }
    results = [['Név', name], ['Kikeverési nehézség', difficulty], ['Karakter KN értéke', negativeDifficulty], ['Alkímia szint', alchemy.availableAlchemyLevel], ['Szükséges alkímia szint', alchemy.neededAlchemyLevel], ['A méreg ára', cost + " ezüst"]];
    data = _.map(formData, function(row) {
      return [t(row.name), t(row.value)];
    });
    data = _.concat(results, data, values);
    return saveData(name, 'mereg', data);
  };

  update = function(event) {
    var alchemy, difficulty;
    renderEffectsDesc();
    clearDisplayValues();
    clearErrorMessage();
    renderCost();
    difficulty = renderDifficulty(event.target);
    alchemy = renderAlchemyResult(difficulty.difficulty);
    return renderSuccess(difficulty.success, alchemy);
  };

  init = function() {
    var alchemy, difficulty;
    if (window.self !== window.top) {
      $('body').css('background-color', 'transparent');
      $('#main-body').attr('class', 'container-fluid');
    }
    renderModifiers();
    renderNegativeModifiers();
    renderAlchemyModifiers();
    renderAllSpecialModifiers();
    renderEffectsDesc();
    renderHiddenModifiers();
    difficulty = renderDifficulty();
    alchemy = renderAlchemyResult(difficulty.difficulty);
    renderSuccess(difficulty.success, alchemy);
    renderCost();
    clearErrorMessage();
    clearDisplayValues();
    $export.click(exportData);
    $('form').on('change', '#id_tipus_fo', function(event) {
      return $('#id_tipus_eros, #id_tipus_gyenge').val($(event.target).val());
    });
    $('form').on('change', 'select[name^="tipus"]', function() {
      return renderAllSpecialModifiers();
    });
    $('form').on('change', 'select, input[type="radio"]', update);
    $('form').on('input', 'input', update);
    return setTimeout((function() {
      return $('body').show();
    }), 0);
  };

  init();

}).call(this);
