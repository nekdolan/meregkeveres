// Generated by CoffeeScript 1.9.3
(function() {
  var cacheOverride, calculateCost, calculateDifficulty, calculateNegativeDifficulty, calculateSpecialDifficulty, checkForError, costMultipliers, difficultyModifiers, errorMessages, exports, getDifficultyForModifier, getLevelData, getPoisonLevelData, getPosisonLevels, key, negativeDifficultyModifiers, provider, sendError, sendValue, specialConditions, specialDifficultyModifiers, t, translate, valueDifficultyCalculator, valueProviders,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  translate = (function() {
    var dictionary;
    dictionary = {
      tipus_fo: 'méreg típusa',
      tipus_eros: 'méreg típusa (erős hatás)',
      tipus_gyenge: 'méreg típusa (gyenge hatás)',
      emeszto: 'emésztőrendszerre ható',
      ideg: 'idegrendszerre ható',
      izom: 'izomrendszerre ható',
      keringesi: 'keringési rendszerre ható',
      semmi: 'semmi',
      emelyges: 'émelygés',
      rosszullet: 'rosszullét',
      fp_vesztes: 'fp vesztés',
      ajulas: 'ájulás',
      halal: 'halál',
      bodulat: 'bódulat',
      alvas: 'alvás',
      gyengeseg: 'gyengeség',
      gorcs: 'görcs',
      benultsag: 'bénultság',
      kabultsag: 'kábultság',
      fajta: 'méreg fajta',
      szint: 'méreg szintje',
      idotartam: 'hatás időtartama',
      hatas: 'hatás',
      kezdet: 'hatás kezdete',
      modositok: 'módosítók',
      tartositas: 'tartósítás',
      etel: 'étel- és italmérgek',
      fegyver: 'fegyvermérgek',
      gaz: 'gáz vagy légimérgek',
      kontakt: 'kontaktmérgek',
      tobb: 'több komponensű mérgek',
      sz0: '0.',
      sz1: '1.',
      sz2: '2.',
      sz3: '3.',
      sz4: '4.',
      sz5: '5.',
      sz6: '6.',
      sz7: '7.',
      sz8: '8.',
      sz9: '9.',
      sz10: '10.',
      sz11: '11.',
      sz12: '12.',
      sz13: '13.',
      h1: '1 hónap',
      h2: '2 hónap',
      h3: '3 hónap',
      h4: '4 hónap',
      h5: '5 hónap',
      h6: '6 hónap',
      egyszeri: 'egyszeri',
      rovid: 'rövid ideig ható méreg',
      kozepes: 'közepes ideig ható méreg',
      hosszu: 'hosszú ideig ható méreg',
      maradando: 'maradandó',
      azonnali: 'azonnali',
      gyors: 'gyors',
      lassu: 'lassú',
      nagyon_lassu: 'nagyon lassú',
      lappango: 'lappangó',
      egyeb: 'egyéb hatás',
      kulonleges: 'különleges hatás',
      idegen: 'idegen hatás',
      ugyanaz: 'enyhe hatás ugyanaz',
      elhagyas: 'enyhe hatás elhagyása',
      gyengites: 'enyhe hatás gyengítése',
      erosites: 'enyhe hatás erősítése',
      gyenge: 'gyenge hatás',
      eros: 'erős hatás',
      kn: 'kikeverési nehézség',
      negative: 'karakter KN értéke',
      van: 'van',
      nincs: 'nincs',
      ar: 'ár (ezüst)',
      beszerzes: 'beszerzés módja',
      vasarlas: 'vásárlás',
      keszites: 'készítés',
      meregkeveres: 'méregkeverés',
      herbalizmus: 'herbalizmus',
      asvanytan: 'ásványtan',
      elettan: 'élettan',
      anatomia: 'anatómia',
      gyakorlat: 'gyakorlat',
      recept: 'recept'
    };
    return function(text) {
      return dictionary[text] || text;
    };
  })();

  difficultyModifiers = {
    tipus_fo: {
      emeszto: 0,
      ideg: 0,
      izom: 0,
      keringesi: 0
    },
    tipus_eros: {
      emeszto: 0,
      ideg: 0,
      izom: 0,
      keringesi: 0
    },
    tipus_gyenge: {
      emeszto: 0,
      ideg: 0,
      izom: 0,
      keringesi: 0
    },
    fajta: {
      etel: 10,
      fegyver: 10,
      gaz: 30,
      kontakt: 30,
      tobb: 'tobb'
    },
    szint: {
      sz2: 10,
      sz3: 20,
      sz4: 30,
      sz5: 40,
      sz6: 50,
      sz7: 60,
      sz8: 70,
      sz9: 80,
      sz10: 100,
      sz11: 130,
      sz12: 170,
      sz13: 220
    },
    idotartam: {
      egyszeri: 10,
      rovid: 30,
      kozepes: 50,
      hosszu: 70,
      maradando: 100
    },
    kezdet: {
      azonnali: 40,
      gyors: 30,
      lassu: 10,
      nagyon_lassu: 20,
      lappango: 50
    },
    egyeb: {
      nincs: 0,
      van: 50
    },
    kulonleges: {
      nincs: 0,
      van: 50
    },
    beszerzes: {
      vasarlas: 0,
      keszites: 0
    }
  };

  negativeDifficultyModifiers = {
    meregkeveres: {
      sz0: 0,
      sz1: 50,
      sz2: 100,
      sz3: 150,
      sz4: 200,
      sz5: 300
    },
    herbalizmus: {
      sz0: 0,
      sz1: 5,
      sz2: 8,
      sz3: 10,
      sz4: 15,
      sz5: 20
    },
    asvanytan: {
      sz0: 0,
      sz1: 5,
      sz2: 8,
      sz3: 10,
      sz4: 15,
      sz5: 20
    },
    elettan: {
      sz0: 0,
      sz1: 5,
      sz2: 8,
      sz3: 10,
      sz4: 15,
      sz5: 20
    },
    anatomia: {
      sz0: 0,
      sz1: 5,
      sz2: 8,
      sz3: 10,
      sz4: 15,
      sz5: 20
    },
    gyakorlat: {
      nincs: 0,
      van: 10
    },
    recept: {
      nincs: 0,
      van: 50
    }
  };

  specialDifficultyModifiers = {
    eros: {
      semmi: 0,
      fp_vesztes: 'fp_vesztes',
      benultsag: 70,
      ajulas: 80,
      alvas: 80,
      halal: 100,
      kabultsag: 40,
      gorcs: 20,
      gyengeseg: 20,
      rosszullet: 30,
      emelyges: 10,
      bodulat: 40
    },
    gyenge: {}
  };

  costMultipliers = {
    emeszto: {
      hatas: {
        semmi: 1,
        emelyges: 1,
        rosszullet: 2,
        fp_vesztes: 4,
        ajulas: 7,
        halal: 15
      },
      szint: {
        sz2: 2,
        sz3: 4,
        sz4: 6,
        sz5: 8,
        sz6: 12,
        sz7: 15,
        sz8: 20,
        sz9: 25,
        sz10: 25,
        sz11: 25,
        sz12: 25,
        sz13: 25
      }
    },
    ideg: {
      hatas: {
        semmi: 1,
        emelyges: 1,
        bodulat: 5,
        alvas: 7,
        halal: 15
      },
      szint: {
        sz2: 1.5,
        sz3: 3,
        sz4: 6,
        sz5: 9,
        sz6: 13,
        sz7: 18,
        sz8: 24,
        sz9: 29,
        sz10: 29,
        sz11: 29,
        sz12: 29,
        sz13: 29
      }
    },
    izom: {
      hatas: {
        semmi: 1,
        gyengeseg: 1,
        gorcs: 7,
        benultsag: 10,
        halal: 15
      },
      szint: {
        sz2: 2,
        sz3: 4,
        sz4: 7,
        sz5: 10,
        sz6: 15,
        sz7: 20,
        sz8: 27,
        sz9: 32,
        sz10: 32,
        sz11: 32,
        sz12: 32,
        sz13: 32
      }
    },
    keringesi: {
      hatas: {
        semmi: 1,
        emelyges: 1,
        kabultsag: 2,
        fp_vesztes: 4,
        ajulas: 7,
        halal: 15
      },
      szint: {
        sz2: 2,
        sz3: 4,
        sz4: 7,
        sz5: 10,
        sz6: 14,
        sz7: 19,
        sz8: 26,
        sz9: 31,
        sz10: 31,
        sz11: 31,
        sz12: 31,
        sz13: 31
      }
    }
  };

  sendError = function() {};

  sendValue = function() {};

  calculateCost = function(modifiers) {
    var creationCost, data, durationCost, effectCost, eros, fo, gyenge, levelCost, poison, ref;
    data = getLevelData(modifiers, ['szint', 'idotartam', 'beszerzes']);
    ref = getPoisonLevelData(data), eros = ref.eros, gyenge = ref.gyenge, fo = ref.fo;
    poison = costMultipliers[eros.poisonType];
    effectCost = poison.hatas[eros.effectType];
    levelCost = poison.szint[data.szint];
    durationCost = data.idotartam === 'maradando' ? 4 : 1;
    creationCost = data.beszerzes === 'vasarlas' ? 2 : 1;
    return levelCost * effectCost * durationCost * creationCost;
  };

  t = function(key) {
    return _.capitalize(translate(key));
  };

  valueProviders = {
    tobb: function() {
      return this.getNumber(t('tobb'));
    },
    fp_vesztes: function() {
      return this.getNumber(t('fp_vesztes'));
    }
  };

  valueDifficultyCalculator = {
    tobb: function(val) {
      return 30 * val;
    },
    fp_vesztes: function(val) {
      return 2 * val;
    }
  };

  cacheOverride = function(name, fn) {
    var cache, cacheKey;
    cache = null;
    cacheKey = '';
    return function(changed) {
      var key;
      key = name + "_" + changed;
      if ((key === cacheKey) || (cache === null)) {
        cache = fn.call(this);
        cacheKey = key;
        return cache;
      } else {
        return cache;
      }
    };
  };

  for (key in valueProviders) {
    provider = valueProviders[key];
    valueProviders[key] = cacheOverride(key, provider);
  }

  getDifficultyForModifier = function(type, name, changed) {
    var difficulty, difficultyKey, ref, ref1;
    if ((type === 'eros' || type === 'gyenge')) {
      if (type === 'gyenge') {
        return 0;
      }
      difficulty = (ref = specialDifficultyModifiers[type]) != null ? ref[name] : void 0;
    } else {
      if ((ref1 = difficultyModifiers[type]) != null ? ref1[name] : void 0) {
        difficulty = difficultyModifiers[type][name];
      } else {
        difficulty = 0;
      }
    }
    if (typeof difficulty === 'string') {
      difficultyKey = difficulty;
      difficulty = valueProviders[difficultyKey](changed);
      if (isNaN(difficulty)) {
        sendError(difficultyKey);
      } else {
        if (changed !== 'ignore') {
          sendValue(difficultyKey, difficulty);
        }
      }
      difficulty = valueDifficultyCalculator[difficultyKey](difficulty);
    }
    if (difficulty != null) {
      return difficulty;
    } else {
      return NaN;
    }
  };

  calculateDifficulty = function(modifiers, changed) {
    return calculateSpecialDifficulty(modifiers) + _(modifiers).map(function(modifier) {
      return getDifficultyForModifier(modifier.name, modifier.value, changed);
    }).reduce(function(prev, next) {
      return prev + next;
    });
  };

  calculateNegativeDifficulty = function(modifiers) {
    return _(modifiers).filter(function(modifier) {
      return negativeDifficultyModifiers[modifier.name] != null;
    }).map(function(modifier) {
      return negativeDifficultyModifiers[modifier.name][modifier.value];
    }).reduce(function(prev, next) {
      return prev + next;
    });
  };

  getPosisonLevels = function(label, data) {
    var effectLevel, effectType, poisonLevel, poisonType;
    poisonType = data["tipus_" + label];
    poisonLevel = _(costMultipliers).keys().value().indexOf(poisonType);
    if (label === 'fo') {
      return {
        poisonLevel: poisonLevel,
        poisonType: poisonType
      };
    }
    effectType = data[label];
    effectLevel = _(costMultipliers[poisonType].hatas).keys().value().indexOf(effectType);
    return {
      poisonLevel: poisonLevel,
      effectLevel: effectLevel,
      poisonType: poisonType,
      effectType: effectType
    };
  };

  getPoisonLevelData = function(data) {
    var attributes;
    attributes = ['eros', 'gyenge', 'fo'];
    return _.reduce(attributes, (function(res, value) {
      return _(res).set(value, getPosisonLevels(value, data));
    }), {}).value();
  };

  getLevelData = function(modifiers, extraInfo) {
    var list, res;
    if (extraInfo == null) {
      extraInfo = [];
    }
    list = _.concat(extraInfo, ['tipus_fo', 'eros', 'gyenge', 'tipus_eros', 'tipus_gyenge']);
    res = _(modifiers).reduce((function(res, val) {
      var ref;
      if (ref = val.name, indexOf.call(list, ref) >= 0) {
        return _(res).set(val.name, val.value);
      } else {
        return res;
      }
    }), {});
    return res.value();
  };

  checkForError = function(key, value) {
    if (isNaN(value)) {
      sendError(key);
    }
    return value;
  };

  calculateSpecialDifficulty = function(modifiers) {
    var data, eros, fo, gyenge, ref;
    data = getLevelData(modifiers, ['idotartam']);
    ref = getPoisonLevelData(data), eros = ref.eros, gyenge = ref.gyenge, fo = ref.fo;
    return _(specialConditions).reduce((function(res, fn, key) {
      return res + checkForError(key, fn(eros, gyenge, fo, data));
    }), 0);
  };

  errorMessages = {
    overflow: "Az erős hatás szintje nem lehet alacsonyabb a gyenge hatás szintjénél!",
    idegenOverflow: "Nem létezik elegendően magas szintű, az erős idegen hatásnak megfelelő méreg!",
    fp_vesztes: "A beírt értéknek számnak kell lennie!",
    tobb: "A beírt értéknek számnak kell lennie!"
  };

  specialConditions = {
    overflow: function(eros, gyenge) {
      if (eros.effectLevel < gyenge.effectLevel) {
        return NaN;
      }
      return 0;
    },
    idegenOverflow: function(eros, gyenge, fo) {
      if (eros.effectLevel >= _(costMultipliers[fo.poisonType].hatas).keys().value().length) {
        return NaN;
      }
      return 0;
    },
    idegen: function(eros, gyenge, fo) {
      var ret;
      ret = 0;
      if (eros.poisonLevel !== fo.poisonLevel) {
        ret += 20;
      }
      if (gyenge.poisonLevel !== fo.poisonLevel) {
        ret += 20;
      }
      return ret;
    },
    ugyanaz: function(eros, gyenge, fo, data) {
      var difficulty;
      if (eros.poisonLevel !== gyenge.poisonLevel || eros.effectLevel !== gyenge.effectLevel) {
        return 0;
      }
      difficulty = Math.round(getDifficultyForModifier('eros', eros.effectType, 'ignore') / 2);
      if (difficulty > 0) {
        difficulty += 20;
      }
      return difficulty;
    },
    gyengites: function(eros, gyenge) {
      if (gyenge.effectLevel < eros.effectLevel - 2 && gyenge.effectLevel !== 0) {
        return -10;
      } else {
        return 0;
      }
      return difficulty;
    },
    erosites: function(eros, gyenge) {
      if (gyenge.effectLevel === eros.effectLevel - 1 && gyenge.effectLevel !== 0) {
        return 10;
      } else {
        return 0;
      }
    },
    elhagyas: function(eros, gyenge) {
      if (gyenge.effectLevel < eros.effectLevel - 2 && gyenge.effectLevel === 0) {
        return -20;
      } else {
        return 0;
      }
    },
    idotartamHalal: function(eros, gyenge, fo, data) {
      if (eros.effectType !== 'halal') {
        return 0;
      }
      return -1 * getDifficultyForModifier('idotartam', data['idotartam']);
    }
  };

  exports = {
    addErrorProvider: function(fn) {
      return sendError = function(key) {
        return fn(errorMessages[key] || "");
      };
    },
    addDisplayValueProvider: function(fn) {
      return sendValue = function(key, value) {
        return fn(key, t(key), value);
      };
    },
    addValueProvider: function(name, fn) {
      return valueProviders[name] = fn;
    },
    init: function() {},
    difficultyModifiers: difficultyModifiers,
    negativeDifficultyModifiers: negativeDifficultyModifiers,
    costMultipliers: costMultipliers,
    translate: translate,
    specialDifficultyModifiers: specialDifficultyModifiers,
    calculateDifficulty: calculateDifficulty,
    calculateNegativeDifficulty: calculateNegativeDifficulty,
    calculateCost: calculateCost,
    t: t
  };

  if (typeof window !== "undefined" && window !== null) {
    window.parser = exports;
  }

  if (typeof global !== "undefined" && global !== null) {
    global.parser = exports;
  }

}).call(this);
